# deploy-awx.yml
---
- hosts: localhost
  gather_facts: false
  vars:
    repo_url: "https://github.com/ansible/awx-operator.git"
    repo_version: "2.19.1"          # or "main"
    workdir: "./awx-operator"
    ns: "awx"

  tasks:
    # Cleanup existing resources for fresh deployment
    - name: Delete existing AWX resources
      ansible.builtin.command: "{{ item }}"
      register: cleanup_result
      failed_when: false
      loop:
        - "kubectl delete awx awx -n {{ ns }}"
        - "kubectl delete secret awx-postgres-configuration -n {{ ns }}"
        - "kubectl delete pvc postgres-15-awx-postgres-15-0 -n {{ ns }}"

    - name: Create AWX namespace
      ansible.builtin.command: kubectl create namespace {{ ns }}
      register: ns_create
      failed_when: false

    - name: Clone awx-operator
      ansible.builtin.git:
        repo: "{{ repo_url }}"
        dest: "{{ workdir }}"
        version: "{{ repo_version }}"
        force: true
        update: true

    - name: Check if make is available
      ansible.builtin.command: which make
      register: make_check
      failed_when: false
      changed_when: false

    - name: Deploy operator (make)
      ansible.builtin.command: make deploy
      args: { chdir: "{{ workdir }}" }
      register: make_deploy
      when: make_check.rc == 0
      failed_when: false

    - name: Deploy operator (kubectl -k) - primary method when make unavailable
      ansible.builtin.command: kubectl apply -k config/default
      args: { chdir: "{{ workdir }}" }
      register: kubectl_deploy
      when: make_check.rc != 0

    - name: Fallback deploy (kubectl -k) if make failed
      ansible.builtin.command: kubectl apply -k config/default
      args: { chdir: "{{ workdir }}" }
      register: kubectl_fallback_deploy
      when: make_check.rc == 0 and make_deploy.rc != 0

    - name: Display deployment method used
      debug:
        msg: |
          Deployment method: {% if make_check.rc == 0 and make_deploy.rc == 0 %}make deploy{% elif make_check.rc != 0 %}kubectl apply -k (make not available){% else %}kubectl apply -k (make fallback){% endif %}

    - name: Check if operator deployment succeeded
      set_fact:
        deployment_success: >-
          {{
            (make_check.rc == 0 and make_deploy.rc == 0) or
            (make_check.rc != 0 and kubectl_deploy.rc == 0) or
            (make_check.rc == 0 and kubectl_fallback_deploy.rc == 0)
          }}

    - name: Verify operator deployment succeeded
      fail:
        msg: "AWX operator deployment failed. Check kubectl and network connectivity."
      when: not deployment_success

    - name: Wait for AWX operator to be ready
      ansible.builtin.command: kubectl wait --for=condition=available --timeout=300s deployment/awx-operator-controller-manager -n awx-operator-system
      register: operator_wait
      failed_when: false

    - name: Clean PostgreSQL data directory
      ansible.builtin.command: rm -rf /opt/awx-postgres-data/*
      become: yes
      failed_when: false

    - name: Create postgres data directory with full permissions
      ansible.builtin.file:
        path: /opt/awx-postgres-data
        state: directory
        mode: '0777'
        owner: 70
        group: 70
      become: yes

    - name: Set SELinux context for PostgreSQL data
      ansible.builtin.command: chcon -R -t container_file_t /opt/awx-postgres-data
      become: yes
      failed_when: false

    - name: Enable container management SELinux boolean
      ansible.builtin.command: setsebool -P container_manage_cgroup on
      become: yes
      failed_when: false

    - name: Check if PV exists and is released
      ansible.builtin.command: kubectl get pv awx-postgres-pv -o jsonpath='{.status.phase}'
      register: pv_status
      failed_when: false
      changed_when: false

    - name: Reset released PV to make it available (preserves data)
      ansible.builtin.command: kubectl patch pv awx-postgres-pv -p '{"spec":{"claimRef":null}}'
      when: pv_status.rc == 0 and pv_status.stdout == "Released"
      failed_when: false

    - name: Copy AWX configuration files to operator directory
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "{{ workdir }}/{{ item }}"
      loop:
        - "storage-class.yml"
        - "postgres-storage.yml"
        - "postgres-config.yml"
        - "awx.yml"

    - name: Apply StorageClass
      ansible.builtin.command: kubectl apply -f storage-class.yml
      args: { chdir: "{{ workdir }}" }
      register: storage_class_result

    - name: Apply PostgreSQL storage (PV/PVC)
      ansible.builtin.command: kubectl apply -f postgres-storage.yml
      args: { chdir: "{{ workdir }}" }
      register: postgres_storage_result

    - name: Apply PostgreSQL configuration secret
      ansible.builtin.command: kubectl apply -f postgres-config.yml
      args: { chdir: "{{ workdir }}" }
      register: postgres_config_result

    - name: Wait for PostgreSQL configuration secret to be available
      ansible.builtin.command: kubectl get secret awx-postgres-configuration -n {{ ns }}
      register: secret_check
      until: secret_check.rc == 0
      retries: 30
      delay: 2

    - name: Check if PostgreSQL service exists
      ansible.builtin.command: kubectl get svc -n awx
      register: postgres_svc_check
      failed_when: false

    - name: Display PostgreSQL services for debugging
      debug:
        msg: "PostgreSQL services: {{ postgres_svc_check.stdout_lines }}"

    - name: Apply AWX CR
      ansible.builtin.command: kubectl apply -f awx.yml
      args: { chdir: "{{ workdir }}" }
      register: awx_cr_result

    - name: Wait for AWX deployment to be ready
      ansible.builtin.command: kubectl wait --for=condition=Ready --timeout=600s awx/awx -n {{ ns }}
      register: awx_wait
      failed_when: false

    # Post-deployment verification
    - name: Check PostgreSQL pod status
      ansible.builtin.command: kubectl get pods -n {{ ns }} -l app.kubernetes.io/name=postgres
      register: postgres_pods
      failed_when: false

    - name: Check AWX pods status
      ansible.builtin.command: kubectl get pods -n {{ ns }} -l app.kubernetes.io/managed-by=awx-operator
      register: awx_pods
      failed_when: false

    - name: Verify database connectivity
      ansible.builtin.command: kubectl exec -n {{ ns }} deployment/awx-web -- pg_isready -h awx-postgres-15.awx.svc.cluster.local -p 5432
      register: db_connectivity
      failed_when: false
      when: awx_wait.rc == 0

    - name: Display deployment results
      debug:
        msg:
          - "Storage setup: {{ storage_class_result.stdout_lines }}"
          - "PostgreSQL storage: {{ postgres_storage_result.stdout_lines }}"
          - "PostgreSQL config: {{ postgres_config_result.stdout_lines }}"
          - "AWX CR application: {{ awx_cr_result.stdout_lines }}"
          - "AWX deployment status: {{ 'Ready' if awx_wait.rc == 0 else 'Still deploying - check kubectl get awx -n awx' }}"
          - "PostgreSQL pods: {{ postgres_pods.stdout_lines | default(['Not checked']) }}"
          - "AWX pods: {{ awx_pods.stdout_lines | default(['Not checked']) }}"
          - "Database connectivity: {{ 'OK' if db_connectivity.rc == 0 else 'Check manually' }}"

    - name: Get AWX admin password
      ansible.builtin.command: kubectl get secret awx-admin-password -n {{ ns }} -o jsonpath='{.data.password}'
      register: admin_password_b64
      failed_when: false

    - name: Decode admin password
      set_fact:
        admin_password: "{{ admin_password_b64.stdout | b64decode }}"
      when: admin_password_b64.rc == 0

    - name: Display access information
      debug:
        msg:
          - "AWX deployment complete!"
          - "Access URL: http://<node-ip>:30081"
          - "Username: admin"
          - "Password: {{ admin_password | default('Check manually with: kubectl get secret awx-admin-password -n awx -o jsonpath=\"{.data.password}\" | base64 --decode') }}"
